//
//  GameScene.swift
//  Flappy Bird
//
//  Created by Logan Griglione on 1/26/22.
//

import SpriteKit
struct physics{
    static let bird: UInt32 = 0x1 << 1
    static let ground: UInt32 = 0x1 << 2
    static let wall: UInt32 = 0x1 << 3
    static let score: UInt32 = 0x1 << 4
}
class GameScene: SKScene, SKPhysicsContactDelegate  {
    var ground = SKSpriteNode()
    var bird = SKSpriteNode()
    var wallPair = SKNode()
    var moveAndRemove = SKAction()
    var gameStarted = Bool()
    var gameOver = SKSpriteNode()
    var gameEnd = false
    var endCheck = false
    var playAgain = 1
    var background = SKSpriteNode()
    var restartButton = SKSpriteNode()
    var score = 0
    var scoreNode = SKLabelNode()
    var coinNode = SKSpriteNode()
    var tutorial = SKSpriteNode()
    var title = SKSpriteNode()
    var jumpNoise: SKAudioNode!
    var firstPipe = true
    var scoreDisp = SKSpriteNode()
    var bestScore = 0
    var flag = false
    var backGroundMusic = SKAudioNode(fileNamed: "backGroundMusic")
    var muteButton = SKSpriteNode()
    var muted = SKSpriteNode(imageNamed: "muted")
    var isMuted = true
    
    override func didMove(to view: SKView) {
        physicsWorld.contactDelegate = self
        ground = SKSpriteNode(imageNamed: "Ground")
        ground.setScale(0.5)
        ground.position = CGPoint(x: frame.minX + 320, y: frame.minY + 20)
       
        ground.physicsBody = SKPhysicsBody(rectangleOf: ground.size)
        ground.physicsBody?.categoryBitMask = physics.ground
        ground.physicsBody?.collisionBitMask = physics.bird
        ground.physicsBody?.contactTestBitMask = physics.bird
        ground.physicsBody?.affectedByGravity = false
        ground.physicsBody?.isDynamic = false
        ground.zPosition = 3
        self.addChild(ground)
        bird = SKSpriteNode(imageNamed: "birdmain")
        bird.size = CGSize(width: 60, height: 70)
        bird.position = CGPoint(x: 0, y: 0)
        
        bird.physicsBody = SKPhysicsBody(circleOfRadius: bird.frame.height / 2)
        bird.physicsBody?.categoryBitMask = physics.bird
        bird.physicsBody?.collisionBitMask = physics.ground | physics.wall
       bird.physicsBody?.contactTestBitMask = physics.ground | physics.wall
        bird.physicsBody?.affectedByGravity = false
        bird.physicsBody?.isDynamic = true
        bird.zPosition = 5
        bird.name = "bird"
        self.addChild(bird)
        background = SKSpriteNode(imageNamed: "fbBackground")
        background.position = CGPoint(x: 0, y: 0)
        background.zPosition = 1
        self.addChild(background)
        scoreNode.text = "0"
        scoreNode.fontColor = SKColor.white
        scoreNode.fontName = "AmericanTypewriter-Bold"
        scoreNode.position = CGPoint(x: 0, y: 420)
        scoreNode.horizontalAlignmentMode = .center
        scoreNode.zPosition = 20
        self.addChild(scoreNode)
        scoreNode.isHidden = true
        tutorial = SKSpriteNode(imageNamed: "fbTutorial")
        tutorial.zPosition = 4
        tutorial.position = CGPoint(x: 0, y: -200)
        self.addChild(tutorial)
        title = SKSpriteNode(imageNamed: "flappyBirdTitle")
        title.position = CGPoint(x: 0, y: 300)
        title.zPosition = 4
        title.setScale(2.5)
        self.addChild(title)
        muteButton = SKSpriteNode(imageNamed: "unMute")
        muteButton.position = CGPoint(x: -150, y: -440)
        muteButton.zPosition = 20
        muteButton.setScale(0.8)
        self.addChild(muteButton)
        muted.position = CGPoint(x: -150, y: -440)
        muted.zPosition = 20
        muted.setScale(0.8)
        self.addChild(muted)
        if let sound = Bundle.main.url(forResource: "backgroundMusic", withExtension: "mp3") {
            backGroundMusic = SKAudioNode(url: sound)
        }
        
    }
    
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        
        if gameEnd == true{
        for touch in touches {
                // Get the location of the touch in this scene
                let location = touch.location(in: self)
                // Check if the location of the touch is within the button's bounds
                if restartButton.contains(location) {
                    removeAllChildren()
                    removeChildren(in: [wallPair])
                    restartButton.isHidden = true
                    score = 0
                    resetGame()
                    }
        }
            }
        else{
            for touch in touches {
                let location = touch.location(in: self)
                if muteButton.contains(location){
                    if isMuted == false{
                        backGroundMusic.removeFromParent()
                        muted.isHidden = false
                        isMuted = true
                    }
                    else{
                        addChild(backGroundMusic)
                        muted.isHidden = true
                        isMuted = false
                    }
                }
                else{
                    allBirdMovement()
                }
                
            }
           
        }
       
        
    }
    func birdMovement(){
        let birdRotation = SKAction.rotate(byAngle: 0.35, duration: 0.13)
        let birdRottationReg = SKAction.rotate(toAngle: 0, duration: 0.13)
        bird.physicsBody?.velocity = CGVector(dx: 0,dy: 0)
        bird.physicsBody?.applyImpulse(CGVector(dx: 0, dy: 100))
        let rotSeq = SKAction.sequence([birdRotation, birdRottationReg])
        self.bird.run(rotSeq)
     
        
    }
    override func update(_ currentTime: TimeInterval) {
        // Called before each frame is rendered
        
        
        
    }
    func resetGame(){
       addChild(bird)
        addChild(ground)
        addChild(background)
        addChild(scoreNode)
        addChild(tutorial)
        addChild(title)
        addChild(muteButton)
        if (isMuted == true){
            addChild(muted)
            muted.isHidden = false
        }
        else{
            addChild(muted)
            muted.isHidden = true
            addChild(backGroundMusic)
        }
        scoreNode.isHidden = true
        firstPipe = true
        scoreNode.text = "0"
        gameOver.isHidden = true
        restartButton.isHidden = true
        bird.position = CGPoint(x: 0 ,y: 0)
        bird.zRotation = 0
        bird.physicsBody?.affectedByGravity = false
        gameEnd = false
        gameStarted = false
        playAgain += 1
        flag = false
    }
   
    
    func createWalls(){
        wallPair = SKNode()
        wallPair.name = "wallPair"
        let topWall = SKSpriteNode(imageNamed: "topPipe")
        let bottomWall = SKSpriteNode(imageNamed: "bottomPipe")
        let coinNode = SKSpriteNode(imageNamed: "Coin")
        var randPos = Int.random(in: 1...3)
        if randPos == 1{
            // middle
            topWall.position = CGPoint(x: 250, y: 435)
            bottomWall.position = CGPoint(x: 250, y: -425)
            coinNode.position = CGPoint(x: 250, y: 0)
        }else if randPos == 2{
            // High
            topWall.position = CGPoint(x: 250, y: 610)
            bottomWall.position = CGPoint(x: 250, y: -250)
            coinNode.position = CGPoint(x: 250, y: 175)
        }
        else if randPos == 3{
            //low
            topWall.position = CGPoint(x: 250, y: 260)
            bottomWall.position = CGPoint(x: 250, y: -600)
            coinNode.position = CGPoint(x: 250, y: -175)
        }
        if firstPipe == true{
            topWall.position = CGPoint(x: 250, y: 435)
            bottomWall.position = CGPoint(x: 250, y: -425)
            coinNode.position = CGPoint(x: 250, y: 0)
            firstPipe = false
        }
        topWall.setScale(0.5)
        bottomWall.setScale(0.5)
        coinNode.setScale(1)
        topWall.physicsBody = SKPhysicsBody(rectangleOf: topWall.size)
        topWall.physicsBody?.categoryBitMask = physics.wall
        topWall.physicsBody?.collisionBitMask = physics.bird
        topWall.physicsBody?.contactTestBitMask = physics.bird
        topWall.physicsBody?.isDynamic = false
        topWall.physicsBody?.affectedByGravity = false
        
        bottomWall.physicsBody = SKPhysicsBody(rectangleOf: bottomWall.size)
        bottomWall.physicsBody?.categoryBitMask = physics.wall
        bottomWall.physicsBody?.collisionBitMask = physics.bird
        bottomWall.physicsBody?.contactTestBitMask = physics.bird
        bottomWall.physicsBody?.isDynamic = false
        bottomWall.physicsBody?.affectedByGravity = false
        
        
        coinNode.physicsBody = SKPhysicsBody(rectangleOf: coinNode.size)
        coinNode.physicsBody?.affectedByGravity = false
        coinNode.physicsBody?.isDynamic = false
        coinNode.physicsBody?.categoryBitMask = physics.score
        coinNode.physicsBody?.collisionBitMask = 0
        coinNode.physicsBody?.contactTestBitMask = physics.bird
        coinNode.name = "coin"
        
        
        wallPair.addChild(topWall)
        wallPair.addChild(bottomWall)
        wallPair.addChild(coinNode)
        wallPair.zPosition = 2
        self.addChild(wallPair)
       
        
    }
    func didBegin(_ contact: SKPhysicsContact) {
        guard var nodeA = contact.bodyA.node else { return }
        guard var nodeB = contact.bodyB.node else { return }
        if nodeA.name == "coin" && nodeB.name == "bird" {
            if gameEnd == true{
                score -= 1
            }else{
           nodeA.removeFromParent()
            score += 1
            scoreNode.text = String(score)
            }
        }
        else{
            if flag == false {
                endScreen()
                flag = true
            }
    }
    }
 
        func endScreen(){
            self.scene?.speed = 0
            if score > bestScore {
                bestScore = score
            }
            let miniScoreNode = SKLabelNode()
            let bestScoreNode = SKLabelNode()
            var bronzeCoinNode = SKSpriteNode()
            var silverCoinNode = SKSpriteNode(imageNamed: "fbSilverCoin")
            var goldCoinNode = SKSpriteNode(imageNamed: "fbGoldCoin")
            scoreNode.isHidden = true
            gameOver = SKSpriteNode(imageNamed: "gameOver")
            gameOver.position = CGPoint(x: 0, y: 150)
            gameOver.setScale(1.25)
            gameOver.zPosition = 20
            addChild(gameOver)
            restartButton = SKSpriteNode(imageNamed: "fbPlayAgainButton")
            restartButton.zPosition = 10
            addChild(restartButton)
            gameEnd = true
            scoreDisp = SKSpriteNode(imageNamed: "scoreDisplay")
            scoreDisp.position = CGPoint(x: 0, y: -200)
            scoreDisp.zPosition = 19
            self.addChild(scoreDisp)
            miniScoreNode.text = String(score)
            miniScoreNode.fontColor = SKColor.white
            miniScoreNode.fontName = "AmericanTypewriter-Bold"
            miniScoreNode.position = CGPoint(x: 95, y: -190)
            miniScoreNode.horizontalAlignmentMode = .center
            miniScoreNode.zPosition = 20
            self.addChild(miniScoreNode)
            bestScoreNode.text = String(bestScore)
            bestScoreNode.fontColor = SKColor.white
            bestScoreNode.fontName = "AmericanTypewriter-Bold"
            bestScoreNode.position = CGPoint(x: 95, y: -250)
            bestScoreNode.horizontalAlignmentMode = .center
            bestScoreNode.zPosition = 20
            self.addChild(bestScoreNode)
            bronzeCoinNode = SKSpriteNode(imageNamed: "fbBronzeCoin")
            bronzeCoinNode.zPosition = 20
            bronzeCoinNode.position = CGPoint(x: -85, y: -210)
            silverCoinNode.zPosition = 20
            silverCoinNode.position = CGPoint(x: -85, y: -210)
            goldCoinNode.zPosition = 20
            goldCoinNode.position = CGPoint(x: -85, y: -210)
            if score <= 10{
                addChild(bronzeCoinNode)
            }
            else if score <= 20 {
                addChild(silverCoinNode)
                
            }
            else {
                addChild(goldCoinNode)
                
            }
            
        }
    func allBirdMovement(){
        muteButton.removeFromParent()
        muted.isHidden = true
        if playAgain == 1{
        if gameStarted == false{
            scoreNode.isHidden = false
            tutorial.removeFromParent()
            title.removeFromParent()
            gameStarted = true
            bird.physicsBody?.affectedByGravity = true
            let spawn = SKAction.run({ [self]
                () in
                self.createWalls()
                let movePipes = SKAction.moveBy(x: -500, y:0, duration: 2.35)
                let removePipes = SKAction.removeFromParent()
                self.moveAndRemove = SKAction.sequence([movePipes, removePipes])
                wallPair.run(self.moveAndRemove)
                
            })
            
            let delay = SKAction.wait(forDuration: 1.25)
            let spawnDelay = SKAction.sequence([spawn, delay])
            let spawnDelayForever = SKAction.repeatForever(spawnDelay)
            self.run(spawnDelayForever)
           birdMovement()
        }
        else {
            if gameEnd == false{
               birdMovement()
                
            }
            
        }
        }else{
            if score == 0{
                scoreNode.isHidden = false
            }
            self.scene?.speed = 1
            bird.physicsBody?.affectedByGravity = true
            tutorial.removeFromParent()
            title.removeFromParent()
            birdMovement()
        }
    }
        }
        
    

