//
//  GameScene.swift
//  Flappy Bird
//
//  Created by Logan Griglione on 1/26/22.
//

import SpriteKit
struct physics{
    static let bird: UInt32 = 0x1 << 1
    static let ground: UInt32 = 0x1 << 2
    static let wall: UInt32 = 0x1 << 3
   
}
class GameScene: SKScene, SKPhysicsContactDelegate  {
    var ground = SKSpriteNode()
    var bird = SKSpriteNode()
    var wallPair = SKNode()
    var moveAndRemove = SKAction()
    var gameStarted = Bool()
    var gameOver = SKSpriteNode()
    var gameEnd = false
    var endCheck = false
    var playAgain = 1
    var background = SKSpriteNode()
    var restartButton = SKSpriteNode()
    var score = SKSpriteNode()
    var scoreDetect = SKSpriteNode()
    override func didMove(to view: SKView) {
        physicsWorld.contactDelegate = self
        ground = SKSpriteNode(imageNamed: "Ground")
        ground.setScale(0.5)
        ground.position = CGPoint(x: frame.minX + 320, y: frame.minY + 20)
       
        ground.physicsBody = SKPhysicsBody(rectangleOf: ground.size)
        ground.physicsBody?.categoryBitMask = physics.ground
        ground.physicsBody?.collisionBitMask = physics.bird
        ground.physicsBody?.contactTestBitMask = physics.bird
        ground.physicsBody?.affectedByGravity = false
        ground.physicsBody?.isDynamic = false
        ground.zPosition = 3
        self.addChild(ground)
        bird = SKSpriteNode(imageNamed: "birdmain")
        bird.size = CGSize(width: 60, height: 70)
        bird.position = CGPoint(x: 0, y: 0)
        
        bird.physicsBody = SKPhysicsBody(circleOfRadius: bird.frame.height / 2)
        bird.physicsBody?.categoryBitMask = physics.bird
        bird.physicsBody?.collisionBitMask = physics.ground | physics.wall
        bird.physicsBody?.contactTestBitMask = physics.ground | physics.wall
        bird.physicsBody?.affectedByGravity = false
        bird.physicsBody?.isDynamic = true
        bird.zPosition = 2
        self.addChild(bird)
        background = SKSpriteNode(imageNamed: "fbBackground")
        background.position = CGPoint(x: 0, y: 0)
        background.zPosition = 1
        self.addChild(background)
        
    }
    
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        if gameEnd == true{
        for touch in touches {
                // Get the location of the touch in this scene
                let location = touch.location(in: self)
                // Check if the location of the touch is within the button's bounds
                if restartButton.contains(location) {
                    removeAllChildren()
                    removeChildren(in: [wallPair])
                    restartButton.isHidden = true
                    resetGame()
                    }
        }}else{
            if playAgain == 1{
            if gameStarted == false{
                gameStarted = true
                bird.physicsBody?.affectedByGravity = true
                let spawn = SKAction.run({ [self]
                    () in
                    self.createWalls()
                    let movePipes = SKAction.moveBy(x: -500, y:0, duration: 2.5)
                    let removePipes = SKAction.removeFromParent()
                    self.moveAndRemove = SKAction.sequence([movePipes, removePipes])
                    wallPair.run(self.moveAndRemove)
                })
                
                let delay = SKAction.wait(forDuration: 1.25)
                let spawnDelay = SKAction.sequence([spawn, delay])
                let spawnDelayForever = SKAction.repeatForever(spawnDelay)
                self.run(spawnDelayForever)
                
                bird.physicsBody?.velocity = CGVector(dx: 0,dy: 0)
                bird.physicsBody?.applyImpulse(CGVector(dx: 0, dy: 90))
            }
            else {
                if gameEnd == false{
                bird.physicsBody?.velocity = CGVector(dx: 0,dy: 0)
                    bird.physicsBody?.applyImpulse(CGVector(dx: 0, dy: 90))
                    
                }
                
            }
            }else{
                self.scene?.speed = 1
                bird.physicsBody?.affectedByGravity = true
                bird.physicsBody?.velocity = CGVector(dx: 0,dy: 0)
                bird.physicsBody?.applyImpulse(CGVector(dx: 0, dy: 90))
            }
        }
       
        
    }
    
    override func update(_ currentTime: TimeInterval) {
        // Called before each frame is rendered
        
        
        
    }
    func resetGame(){
       addChild(bird)
        addChild(ground)
        addChild(background)
        gameOver.isHidden = true
        restartButton.isHidden = true
        bird.position = CGPoint(x: 0 ,y: 0)
        bird.zRotation = 0
        bird.physicsBody?.affectedByGravity = false
        gameEnd = false
        gameStarted = false
        playAgain += 1
    }
   
    
    func createWalls(){
        wallPair = SKNode()
        wallPair.name = "wallPair"
        let topWall = SKSpriteNode(imageNamed: "topPipe")
        let bottomWall = SKSpriteNode(imageNamed: "bottomPipe")
        var randPos = Int.random(in: 1...3)
        
        if randPos == 1{
            // middle
            topWall.position = CGPoint(x: 250, y: 425)
            bottomWall.position = CGPoint(x: 250, y: -425)
        }else if randPos == 2{
            // High
            topWall.position = CGPoint(x: 250, y: 600)
            bottomWall.position = CGPoint(x: 250, y: -250)
        }
        else if randPos == 3{
            //low
            topWall.position = CGPoint(x: 250, y: 250)
            bottomWall.position = CGPoint(x: 250, y: -600)
        }
        topWall.setScale(0.5)
        bottomWall.setScale(0.5)
        topWall.physicsBody = SKPhysicsBody(rectangleOf: topWall.size)
        topWall.physicsBody?.categoryBitMask = physics.wall
        topWall.physicsBody?.collisionBitMask = physics.bird
        topWall.physicsBody?.contactTestBitMask = physics.bird
        topWall.physicsBody?.isDynamic = false
        topWall.physicsBody?.affectedByGravity = false
        
        bottomWall.physicsBody = SKPhysicsBody(rectangleOf: bottomWall.size)
        bottomWall.physicsBody?.categoryBitMask = physics.wall
        bottomWall.physicsBody?.collisionBitMask = physics.bird
        bottomWall.physicsBody?.contactTestBitMask = physics.bird
        bottomWall.physicsBody?.isDynamic = false
        bottomWall.physicsBody?.affectedByGravity = false
        
        
        wallPair.addChild(topWall)
        wallPair.addChild(bottomWall)
        wallPair.zPosition = 2
        self.addChild(wallPair)

        
    }
    func didBegin(_ contact: SKPhysicsContact) {
            self.scene?.speed = 0
        gameOver = SKSpriteNode(imageNamed: "gameOver")
        gameOver.position = CGPoint(x: 0, y: 150)
        gameOver.setScale(1.25)
        gameOver.zPosition = 20
        addChild(gameOver)
        restartButton = SKSpriteNode(imageNamed: "fbPlayAgainButton")
        restartButton.zPosition = 10
        addChild(restartButton)
        gameEnd = true
        
    }
    
}
